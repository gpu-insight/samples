import os

vars = Variables(None, ARGUMENTS)
vars.Add(PathVariable('CONFIG_SHADER_PATH',
                      'Path to shaders',
                      os.path.join(GetLaunchDir(), 'shaders'),
                      PathVariable.PathIsDir))

env = Environment(variables=vars,
                  BINDIR='#bin',
                  LIBS=['botson_sdk', 'EGL', 'GL'],
                  LIBPATH=['/usr/local/lib64', '/usr/lib64'],
                  CCFLAGS=['-std=c++11', '-g', '-DGL_GLEXT_PROTOTYPES'],
                  CPPDEFINES={'CONFIG_SHADER_PATH': '"\\\"$CONFIG_SHADER_PATH\\\""'})

env.Decider('MD5')

botson_root = ''
try:
    botson_root = os.environ['BOTSON_ROOT']
    env.Append(LIBPATH=os.path.join(botson_root, 'lib64'))
    env.Append(CPPPATH=os.path.join(botson_root, 'include'))
    env.Append(LIBS=['botson'])     # our libGL.so contains none of symbols yet
except KeyError as e:
    print("\033[91m {}\033[00m".format("env var $BOTSON_ROOT not exist, built with default GL libraries."))

Export('env')

# get a list of subdirectories
sub_dirs = os.walk('.', topdown=False)
first = last = next(sub_dirs)
for last in sub_dirs:
    pass

# Do nothing unless a subdirectory contains a build script named SConscript
scons_scripts = [os.path.join(d, 'sconscript') for d in last[1] if os.path.exists(os.path.join(d, 'sconscript'))]

# Hierarchical build
for s in scons_scripts:
    SConscript(s, variant_dir=os.path.join('build', os.path.dirname(s)), duplicate=0)
